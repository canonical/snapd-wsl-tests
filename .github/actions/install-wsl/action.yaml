# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Canonical Ltd.

name: Install WSL
author: Zygmunt Krynicki
description: |
  Install or upgrade WSL to the specified release.
inputs:
  wsl-msi-url:
    description: URL of the MSI installer
    required: false
    default: https://github.com/microsoft/WSL/releases/download/2.2.4/wsl.2.2.4.0.x64.msi
  wsl-msi-file:
    description: Name of the WSL installer
    required: false
    default: wsl.2.2.4.0.x64.msi
  # Remaining inputs describe wslconfig file:
  # https://learn.microsoft.com/en-us/windows/wsl/wsl-config
  # Only a small subset is implemented, as needed.
  wslconfig-kernel:
    description: Path to the Linux kernel file stored on the Windows file system
    required: false
    default: ""
  wslconfig-kernel-command-line:
    description: Path to the Linux kernel file stored on the Windows file system
    required: false
    default: ""
  wslconfig-vm-idle-timeout:
    description: Number of millisceconds to wait before shutting down an idle instance
    required: false
    default: 60000
branding:
  icon: download
  color: orange
runs:
  using: composite
  steps:
    - name: Cache ${{ inputs.wsl-msi-file }} WSL installer
      id: cache-wsl-installer
      uses: actions/cache@v4
      with:
        path: ${{ inputs.wsl-msi-file }}
        key: ${{ inputs.wsl-msi-file }}
    - name: Download WSL installer version ${{ inputs.wsl-msi-file }}
      if: ${{ steps.cache-wsl-installer.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: |
        Set-StrictMode -version latest
        $ProgressPreference = 'SilentlyContinue'
        Write-Output "Downloading WSL installer release from GitHub..."
        Invoke-WebRequest -Uri "${{ inputs.wsl-msi-url }}" -OutFile "${{ inputs.wsl-msi-file }}" -UseBasicParsing
        if ( ! $? ) {
          exit 1
        }
    - name: Install/Upgrade WSL
      shell: pwsh
      run: |
        Set-StrictMode -version latest
        Write-Output "Running WSL installer..."
        Start-Process -Wait -NoNewWindow msiexec.exe -ArgumentList "/quiet /passive /package ${{ inputs.wsl-msi-file }}"
        if ( ! $? ) {
          exit 1
        }
        Write-Output "Switching to WSL 2."
        Start-Process -NoNewWindow -Wait -FilePath "wsl.exe" -ArgumentList "--set-default-version 2"
        if ( ! $? ) {
          exit 1
        }
        Write-Output "Querying WSL version and status."
        Start-Process -NoNewWindow -Wait -FilePath "wsl.exe" -ArgumentList "--version"
        if ( ! $? ) {
          exit 1
        }
        Start-Process -NoNewWindow -Wait -FilePath "wsl.exe" -ArgumentList "--status"
        if ( ! $? ) {
          exit 1
        }

    - name: Create a .wslconfig file
      shell: pwsh
      run: |
        Set-StrictMode -version latest

        Write-Output "Preparing WSL configuration file."
        # This is expanded using single quote at string, since the expansion is
        # done by GitHub logic, not powershell.
        $WslConfig = @'
        [wsl2]
        ${{ inputs.wslconfig-vm-idle-timeout != '' && format('vmIdleTimeout = {0}', inputs.wslconfig-vm-idle-timeout) || '# vmIdleTimeout is not set' }}
        ${{ inputs.wslconfig-kernel != '' && format('kernel = {0}', inputs.wslconfig-kernel) || '# kernel is not set' }}
        ${{ inputs.wslconfig-kernel-command-line != '' && format('kernelCommandLine = {0}', inputs.wslconfig-kernel-command-line) || '# kernelCommandLine is not set' }}
        '@.Replace('\', '\\')

        New-Item -Force -ItemType File -Path "${Env:USERPROFILE}" -Name ".wslconfig" -Value "$WslConfig"
        if ( ! $? ) {
          Write-Error "Cannot create WSL configuration file."
          exit 1
        }

        type "${Env:USERPROFILE}/.wslconfig"
