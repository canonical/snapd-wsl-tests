name: Smoke
run-name: Smoke test with hello on ${{ inputs.distro-name }}

on:
  workflow_call:
    inputs:
      distro-name:
        required: true
        type: string
      architecture:
        required: true
        type: string
      wsl-rootfs-url:
        required: true
        type: string
      wsl-rootfs-file:
        required: true
        type: string
      wsl-distro-name:
        required: true
        type: string
      wsl-enable-systemd:
        required: false
        type: boolean
        default: false
      wsl-enable-cloud-init-hack:
        required: false
        type: boolean
        default: false
      wsl-msi-url:
        required: false
        type: string
        default: https://github.com/microsoft/WSL/releases/download/2.2.4/wsl.2.2.4.0.x64.msi
      wsl-msi-file:
        required: false
        type: string
        default: wsl.2.2.4.0.x64.msi
      snapd-snap-revision:
        required: false
        type: number
        default: 0
      snapd-snap-channel:
        required: false
        type: string
        default: latest/stable

env:
  WSL_UTF8: "1"

jobs:
  hello:
    name: "Smoke test with \"hello\" snap"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install WSL
        uses: ./.github/actions/install-wsl

      - name: Import ${{ inputs.wsl-distro-name }} into WSL and run cloud-init
        id: setup-distro
        uses: ./.github/actions/setup-distro
        with:
          wsl-distro-name: ${{ inputs.wsl-distro-name }}
          wsl-rootfs-url: ${{ inputs.wsl-rootfs-url }}
          wsl-rootfs-file: ${{ inputs.wsl-rootfs-file }}
          wsl-enable-systemd: ${{ inputs.wsl-enable-systemd }}
          wsl-enable-cloud-init-hack: ${{ inputs.wsl-enable-cloud-init-hack }}

      - name: Install snapd snap from a channel
        uses: ./.github/actions/install-snap
        if: ${{ inputs.snapd-snap-revision == 0 }}
        with:
          wsl-distro-name: ${{ inputs.wsl-distro-name }}
          snap-name: snapd
          snap-channel: ${{ inputs.snapd-snap-channel }}

      - name: Install specific snapd snap revision
        uses: ./.github/actions/install-snap
        if: ${{ inputs.snapd-snap-revision != 0 }}
        with:
          wsl-distro-name: ${{ inputs.wsl-distro-name }}
          snap-name: snapd
          snap-revision: ${{ inputs.snapd-snap-revision }}

      - name: Install core22 snap
        uses: ./.github/actions/install-snap
        with:
          wsl-distro-name: ${{ inputs.wsl-distro-name }}
          snap-name: core22

      - name: Install hello snap
        uses: ./.github/actions/install-snap
        with:
          wsl-distro-name: ${{ inputs.wsl-distro-name }}
          snap-name: hello

      - name: Run hello snap application
        run: |
          Set-StrictMode -version latest
          $DistroName = '${{ inputs.wsl-distro-name }}'
          $SnapName = 'hello'

          Write-Output "Running ${SnapName} application."
          if ((wsl --distribution $DistroName snap run ${SnapName}) -notmatch 'Hello, world!') {
            Write-Error "Cannot run snap ${SnapName} application."
            exit 1
          }

      - name: Install docker snap
        uses: ./.github/actions/install-snap
        with:
          wsl-distro-name: ${{ inputs.wsl-distro-name }}
          snap-name: docker

      - name: Cache ubuntu:24.04 container image
        id: cache-container-image
        uses: actions/cache@v4
        with:
          path: ubuntu-24.04.tar.gz
          key: oci/ubuntu:24.04

      - name: Inspect status of docker service
        env:
          SNAP_NAME: docker
          WSL_DISTRO_NAME: ${{ inputs.wsl-distro-name }}
        run: |
          Set-StrictMode -version latest
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap run ${Env:SNAP_NAME} --help
          wsl --distribution ${Env:WSL_DISTRO_NAME} systemctl status snap.docker.dockerd.service
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap services
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap logs ${Env:SNAP_NAME}

      - name: Pull ubuntu:24.04 container image
        if: ${{ steps.cache-container-image.outputs.cache-hit != 'true' }}
        env:
          SNAP_NAME: docker
          WSL_DISTRO_NAME: ${{ inputs.wsl-distro-name }}
          WSL_DISTRO_USER: user ## TODO: use input from distro setup job
          IMAGE_TAG: "ubuntu:24.04"
          IMAGE_FILE: "ubuntu-24.04.tar.gz"
        run: |
          Set-StrictMode -version latest
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap run ${Env:SNAP_NAME} pull ${Env:IMAGE_TAG}
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap run ${Env:SNAP_NAME} save --output ${Env:IMAGE_FILE} ${Env:IMAGE_TAG}

      - name: Import ubuntu:24.04 container image
        if: ${{ steps.cache-container-image.outputs.cache-hit == 'true' }}
        env:
          SNAP_NAME: docker
          WSL_DISTRO_NAME: ${{ inputs.wsl-distro-name }}
          WSL_DISTRO_USER: user ## TODO: use input from distro setup job
          IMAGE_TAG: "ubuntu:24.04"
          IMAGE_FILE: "ubuntu-24.04.tar.gz"
        run: |
          Set-StrictMode -version latest
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap run ${Env:SNAP_NAME} load --input ${Env:IMAGE_FILE}

      - name: Run hello docker container
        env:
          SNAP_NAME: docker
          WSL_DISTRO_NAME: ${{ inputs.wsl-distro-name }}
          WSL_DISTRO_USER: user ## TODO: use input from distro setup job
        run: |
          Set-StrictMode -version latest
          Write-Output "Running cat /etc/os-release from ubuntu:24.04."
          wsl --distribution ${Env:WSL_DISTRO_NAME} snap run docker run --rm ubuntu:24.04 cat /etc/os-release
          if ((wsl --distribution ${Env:WSL_DISTRO_NAME} --user ${Env:WSL_DISTRO_USER} --cd '~' --exec snap run ${Env:SNAP_NAME} run --rm ubuntu:24.04 cat /etc/os-release | Select-String -NoEmphasis -CaseSensitive -Raw -Pattern '^VERSION_ID=') -ne 'VERSION_ID="24.04"') {
            Write-Error "Expected to see VERSION_ID=... for Ubuntu 24.04."
            Exit 1
          }

      - name: Terminate ${{ inputs.distro-name }} ${{ inputs.architecture }} WSL instance
        if: always()
        run: |
          Set-StrictMode -version latest
          Write-Output "Terminating ${{ inputs.distro-name }} ${{ inputs.architecture }} WSL instance..."
          $DistroName = '${{ inputs.wsl-distro-name }}'

          Start-Process -NoNewWindow -Wait -FilePath "wsl.exe" -ArgumentList "--terminate $DistroName"
          Start-Process -NoNewWindow -Wait -FilePath "wsl.exe" -ArgumentList "--unregister $DistroName"
